==================================
Lua - Environment
==================================

Lua needs three pieces of software to setup a development environment:
- Text Editor
- Lua Interpreter
- Lua Compiler


The Lua interpreter allows the typing of command and have them immediately
 be executed. The interpreter stops the execution of a Lua file in case it
  encounters an error.


The Lua compiler is needed when Lua is being extended to other languages
 and applications.



==================================
Lua - Basic Syntax
==================================

To run a lua program, there are two ways in Linux.

1.) With a file name 'foo.lua', the 'lua' command can be run to execute.

/bin/bash
------------------
lua foo.lua
------------------


2.) The other way, is to make the 'foo.lua' file executable, which then needs
     a line added to have the BASH command shell use 'lua' to execute.

foo.lua
------------------
#!/usr/local/bin/lua

print("\nTest\n")
------------------


/bin/bash
------------------
chmod 744 ./foo.lua

./foo.lua
------------------



Lua programs consist of various tokens. These tokens can be a:
- keyword
- identifier
- constant
- string literal
- symbol

In the short Lua program below, there are three tokens:


foo.lua
------------------
#!/usr/local/bin/lua

io.write("Hello world, from ",_Version,"!\n")
------------------


Comments blocks are helping text in a Lua program, which are ignored by the
 interpreter. Commens start with the characters '--[[' and end with '--]]'

A single line comment is annotated with the '--' characters.


Lua identifiers is the name used to identify a variable, function, or any other
 user-defined item. An identifier starts with a letter, capital or lowercase,
  or an underscore, followed by zero or more letters, numbers, and underscores.

Lua does not allow punction characters (@, $, and %) within identifiers. Lua
 is also case sensitive, so a variable named "Manpower", will be different from
  the variable "manpower".

In the table below are reserved keywords that cannot be assigned as identifiers
 in Lua. They are already reserved words.


┌────────────┬─────────┬───────┬────────┐
│     and    │  break  │  do   │  else  │
├────────────┼─────────┼───────┼────────┤
│   elseif   │   end   │ false │  for   │
├────────────┼─────────┼───────┼────────┤
│  function  │   if    │  in   │ local  │
├────────────┼─────────┼───────┼────────┤
│     nil    │   not   │  or   │ repeat │
├────────────┼─────────┼───────┼────────┤
│   return   │  then   │ true  │  until │
├────────────┼─────────┼───────┼────────┤
│   while    │         │       │        │
└────────────┴─────────┴───────┴────────┘


If a line in Lua has whitespace, (blanks, tabs, newline characters, and
 comments), then these lines are completely ignored.

However, whitespace is needed to separate one statement from another. For
 example, when defining a local varaible, a whitespace character is needed.

foo.lua
------------------
local age
------------------


In the code below, whitespace is not necessaraly needed between 'fruit' and '=',
 and not needed between '=' and 'apples', but they can be added if desired.

foo.lua
------------------
fruit = apples + oranges
------------------
