==================================
Lua - Functions
==================================

A function is a group of statements that perform a task. Re-usable code can
 be written as a function to perform a specific task.

Lua provides numerous built-in methods that a program can call, such as
 "print()", to print the argument passed as input.


The syntax of a function is:

------------------
optional_function_scope function function_name (arguments)
  -- function_body
  return result_params_comma_separated
end
------------------


These individual parts are:
- Optional Function Scope: Use of the keyword local to limit the scope of a
   function, or to make it a global funciton.

- Function Name: The identifier of the function.

- Arguments: A placeholder for a value passed into the function from outside
   of its scope.

- Function Body: The collectio nof statements that define what the method does.

- Return: Data that is passed back to the program, outside of the functional
   scope, to the scope that called the function.



foo.lua
------------------
function max(num1, num2)
  if(num1 > num2) then
    result = num1;
  else
    result = num2;
  end
return result;
end
------------------


If a function uses arguments, the function must declare the varaibles that
 accept the values of the arguments. This are called "formal parameters".

Formal parameters behave like local varaibles in the function, they are created
 on entry into the function and are destroyed when exiting.

When the function is invoked, the control of the program changes over to the
 process that is running the invoked function. After the end of the function
  the program then returns program control back to the main program.



Assigning and Passing Functions
----------------------------------

Functions can be assigned to variables, and can be passed as parameters to
 other functions.

An example of passing a function as another function's arguments:


foo.lua
------------------
myprint = function(param)
  print("This is my print function - ##",param,"##")
end

function add(num1, num2, functionPrint)
  result = num1 + num2
  functionPrint(result)
end

myprint(10);
add(2,5,myprint);
------------------



Functions with Variable Arguments
----------------------------------

Functions are able to be made to pass variable arguements using "..." as a 
 parameter. This allows anything to be added.


foo.lua
------------------
function average(...);
  result = 0;
  local arg = {...}
  for i, v in ipairs(arg) do
    result = result + v
  end
  return result/#arg
end
print("The average is: ",average(10,5,3,4,5,6))
------------------


When checking the value of args, this results in a table, and a memory address:
- print(args) = table: 0x1e74de60

Iterating through a table of values will looks to be done with a "for in" loop.



==================================
Lua - Strings
==================================

Strings are a sequence of characters. Lua allows for strings to be initialized
 in three ways:

- single quotes
- double quotes
- between double brackets


foo.lua
------------------
string1 = "Lua";
print("\"String1 is: \"",string1);

string2 = 'Tutorial';
print("\"String2 is: \"",string2);

string3 = [[Lua Tutorial]]
print("String 3 is",string3);
------------------


Escape sequence characters in strings are used to change the normal
 interpretations of characters. While a regular double quote may not be usable
  in a string, as they usually are used to identify the start and end points of
   a string, they can be interpreted literally as a character through an
    escape sequence.


┌─────────────────┬──────────────────────┐
│ Escape Sequence │         Use          │
├─────────────────┼──────────────────────┤
│       \a        │         Bell         │
├─────────────────┼──────────────────────┤
│       \b        │       Backspace      │
├─────────────────┼──────────────────────┤
│       \f        │       Formfeed       │
├─────────────────┼──────────────────────┤
│       \n        │       New line       │
├─────────────────┼──────────────────────┤
│       \r        │    Carriage return   │
├─────────────────┼──────────────────────┤
│       \t        │          Tab         │
├─────────────────┼──────────────────────┤
│       \v        │      Vertical Tab    │
├─────────────────┼──────────────────────┤
│       \\        │       Backslash      │
├─────────────────┼──────────────────────┤
│       \"        │     Double Quotes    │
├─────────────────┼──────────────────────┤
│       \'        │     Single Quotes    │
├─────────────────┼──────────────────────┤
│       \[        │ Left square bracket  │
├─────────────────┼──────────────────────┤
│       \]        │ Right square bracket │
└─────────────────┴──────────────────────┘


Lua can also manipulate strings with built in methods as well.


┌─────────┬────────────────────────────────────────────────────────┐
│ Sr. No. │                 Method and Purpose                     │
├─────────┼────────────────────────────────────────────────────────┤
│    1    │ string.upper(arg)                                      │
│         │                                                        │
│         │ - Returns a capitlized representation of the arugment  │
├─────────┼────────────────────────────────────────────────────────┤
│    2    │ string.lower(arg)                                      │
│         │                                                        │
│         │ - Returns a lower case representation of the arugment  │
├─────────┼────────────────────────────────────────────────────────┤
│    3    │ string.gsub(mainString,findString,replaceString)       │
│         │                                                        │
│         │ - Returns a string by replacing occurences of          │
│         │    findString with replaceString                       │
├─────────┼────────────────────────────────────────────────────────┤
│    4    │ string.find(mainString,findString,StartIndex,EndIndex) │
│         │                                                        │
│         │ - Returns the start index and end index of the         │
│         │    findString in the main string and nil if not found  │
├─────────┼────────────────────────────────────────────────────────┤
│    5    │ string.reverse(argument)                               │
│         │                                                        │
│         │ - Returns a string by reversing the characters of the  │
│         │    passed string                                       │
├─────────┼────────────────────────────────────────────────────────┤
│    6    │ string.format(...)                                     │
│         │                                                        │
│         │ - Returns a formatted string                           │
├─────────┼────────────────────────────────────────────────────────┤
│    7    │ string.char(arg) and string.byte(arg)                  │
│         │                                                        │
│         │ - Returns internal numeric and character               │
│         │    representations of input argument                   │
├─────────┼────────────────────────────────────────────────────────┤
│    8    │ string.len(arg)                                        │
│         │                                                        │
│         │ - Returns a length of the passed string                │
├─────────┼────────────────────────────────────────────────────────┤
│    9    │ string.rep(string, n)                                  │
│         │                                                        │
│         │ - Returns a string by repeating the same string n      │
│         │    number of times                                     │
├─────────┼────────────────────────────────────────────────────────┤
│   10    │ ..                                                     │
│         │                                                        │
│         │ - Thus operator concatentates two strings              │
└─────────┴────────────────────────────────────────────────────────┘

No. 4, the "StartIndex" and "EndIndex" are optional.



